services:
  nginx:
    image: nginx:latest
    container_name: nginx
    hostname: nginx
    ports:
      - "80:80"          
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf  
      - ./pages:/pages
    depends_on:
      - backend
    networks:
      - my_network

  neo4j:
    image: neo4j:latest
    container_name: neo4j_db
    environment:
      NEO4J_AUTH: ${NEO4J_AUTH}
      NEO4J_dbms_memory_heap_initial__size: ${NEO4J_dbms_memory_heap_initial__size}
      NEO4J_dbms_memory_heap_max__size: ${NEO4J_dbms_memory_heap_max__size}
    volumes:
      - ./data/neo4j_data:/data
      - ./data/neo4j_logs:/logs  # Хранение логов
    ports:
      - "${NEO4J_PORT_HTTP}:${NEO4J_PORT_HTTP}"  # Порт для HTTP
      - "${NEO4J_PORT_BOLT}:${NEO4J_PORT_BOLT}"  # Порт для Bolt
    networks:
      - my_network

  mongo:
    image: mongo:latest
    container_name: ${MONGO_NAME}
    hostname: ${MONGO_HOST}
    ports:
      - "${MONGO_PORT}:${MONGO_PORT}"
    volumes:
      - ./data/mongo_data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    networks:
      - my_network

  redis:
    image: redis:latest
    container_name: ${REDIS_NAME}
    hostname: ${REDIS_HOST}
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    volumes:
      - ./data/redis_data:/data
    networks:
      - my_network

  backend:
    container_name: ${BACKEND_NAME}
    hostname: ${BACKEND_HOST}
    build:
      context: ./backend
      dockerfile: ./Dockerfile
    ports:
      - '${BACKEND_PORT}:${BACKEND_PORT}'
    env_file:
      - ./.env
    volumes:
      - ./backend/app:/app
    networks:
      - my_network

networks:
  my_network: